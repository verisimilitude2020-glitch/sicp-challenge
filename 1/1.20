 The process that a procedure generates is of course dependent on the rules used by the interpreter. As an example, consider the iterative gcd procedure given above. Suppose we were to interpret this procedure using normal-order evaluation, as discussed in section 1.1.5. (The normal-order-evaluation rule for if is described in exercise 1.5.) Using the substitution method (for normal order), illustrate the process generated in evaluating (gcd 206 40) and indicate the remainder operations that are actually performed. How many remainder operations are actually performed in the normal-order evaluation of (gcd 206 40)? In the applicative-order evaluation?

 ==> 

 The given procedure in question is 

 (define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))


GCD(206, 40)

Normal order evaluation is fully expand and then reduce.

1. (if (= 40 0)
    206
    (gcd 40 (remainder 206 40)))

2. (gcd 40 (remainder 206 40))

3. (if (= (remainder 206 40) 0)
    40
    (gcd (remainder 206 40)
         (remainder 40 (remainder 206 40))))


4. (if (= 6 0)
    40
    (gcd (remainder 206 40)
         (remainder 40 (remainder 206 40))))

5. (gcd (remainder 206 40)
     (remainder 40 (remainder 206 40)))


6. (if (= (remainder 40 (remainder 206 40)) 0)
    (remainder 206 40)
    (gcd (remainder 40 (remainder 206 40))
         (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))))

7. (if (= (remainder 40 6) 0)
    (remainder 206 40)
    (gcd (remainder 40 (remainder 206 40))
         (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))))

8. if (= 4 0)
    (remainder 206 40)
    (gcd (remainder 40 (remainder 206 40))
         (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))))

9. (gcd (remainder 40 (remainder 206 40))
     (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))

10. (if (= (remainder (remainder 206 40) (remainder 40 (remainder 206 40))) 0)
    (remainder 40 (remainder 206 40))
    (gcd (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
         (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))))

11. (if (= 2 0)
    (remainder 40 (remainder 206 40))
    (gcd (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
         (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40))))))

12. (gcd (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
     (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))))

13. if (= (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))) 0)
    (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
    (gcd (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))) (remainder a  (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))))))

14. (if (= 0 0)
    (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))
    (gcd (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))) (remainder a  (remainder (remainder 40 (remainder 206 40)) (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))))))

15. (remainder (remainder 206 40) (remainder 40 (remainder 206 40)))

16. 2

For normal order evaluation, remainder is called about 18 times.

Application order evaluation is fully evaluate and then expand.

(gcd 206 40)

1. (if (= 40 0)
    206
    (gcd 40 (remainder 206 40))) ; 1*remainder

2. (gcd 40 6)

3. (if (= 6 0)
    40
    (gcd 6 (remainder 40 6))) ; 1*remainder

4. (gcd 6 4)

5. (if (= 4 0)
    6
    (gcd 4 (remainder 6 4))) ; 1*remainder

6. (gcd 4 2)

7. (if (= 2 0)
    4
    (gcd 2 (remainder 4 2))) ; 1*remainder

8. (gcd 2 0)

9. (if (= 0 0)
    2
    (gcd 0 (remainder 2 0)))

10. GCD is 2.

Here, remainder gets called 2 times.
Thus, GCD is called twice.