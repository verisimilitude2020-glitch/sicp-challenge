The smallest-divisor procedure shown at the start of this section does lots of needless testing: After it checks to see if the number is divisible by 2 there is no point in checking to see if it is divisible by any larger even numbers. This suggests that the values used for test-divisor should not be 2, 3, 4, 5, 6, ..., but rather 2, 3, 5, 7, 9, .... To implement this change, define a procedure next that returns 3 if its input is equal to 2 and otherwise returns its input plus 2. Modify the smallest-divisor procedure to use (next test-divisor) instead of (+ test-divisor 1). With timed-prime-test incorporating this modified version of smallest-divisor, run the test for each of the 12 primes found in exercise 1.22. Since this modification halves the number of test steps, you should expect it to run about twice as fast. Is this expectation confirmed? If not, what is the observed ratio of the speeds of the two algorithms, and how do you explain the fact that it is different from 2?


==> 

A. Older case, by iterating through every number from 2

; Methods to determine whether the number is prime

(define (square x) (* x x))

(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))

(define (divides? a b)
  (= (remainder b a) 0))

(define (prime? n) 
   (= n (smallest-divisor n))) 

; Timing Methods
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))

(define (report-prime elapsed-time)
  (display " *** ")
  (display (/ elapsed-time 1000.0)))

Output in seconds for below inputs

(timed-prime-test 1000000007)
(timed-prime-test 1000000009) 
 (timed-prime-test 1000000021) 
 (timed-prime-test 10000000019) 
 (timed-prime-test 10000000033) 
 (timed-prime-test 10000000061) 
 (timed-prime-test 100000000003) 
 (timed-prime-test 100000000019) 
 (timed-prime-test 100000000057) 
 (timed-prime-test 1000000000039) 
 (timed-prime-test 1000000000061) 
 (timed-prime-test 1000000000063)

1000000007 *** 0
1000000009 *** 10.106
1000000021 *** 2.045
10000000019 *** 8.048
10000000033 *** 2.042
10000000061 *** 10.122
100000000003 *** 20.207
100000000019 *** 28.237
100000000057 *** 22.154
1000000000039 *** 81.544
1000000000061 *** 79.372
1000000000063 *** 75.724

B. Second case:

Our next procedure returns 3 if the divisor is 2, and if not every time 2 is added. If number is divisible by 2, all odd numbers are skipped. If not, all even numbers are skipped.

; Methods to determine whether the number is prime

(define (square x) (* x x))

(define (smallest-divisor n)
  (find-divisor n 2))

(define (next n) 
     (if (= n 2) 3 (+ n 2))) 

(define (find-divisor n test-divisor)
  (define (next n) 
     (if (= n 2) 3 (+ n 2))) 

  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))

(define (divides? a b)
  (= (remainder b a) 0))

(define (prime? n) 
   (= n (smallest-divisor n))) 

; Timing Methods
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time 1000.0))

For below input,

(timed-prime-test 1000000007)
(timed-prime-test 1000000009) 
 (timed-prime-test 1000000021) 
 (timed-prime-test 10000000019) 
 (timed-prime-test 10000000033) 
 (timed-prime-test 10000000061) 
 (timed-prime-test 100000000003) 
 (timed-prime-test 100000000019) 
 (timed-prime-test 100000000057) 
 (timed-prime-test 1000000000039) 
 (timed-prime-test 1000000000061) 
 (timed-prime-test 1000000000063)

Output is

1000000007 *** 0
1000000009 *** 8.077
1000000021 *** 0
10000000019 *** 2.013
10000000033 *** 8.044
10000000061 *** 2.046
100000000003 *** 18.327
100000000019 *** 12.34
100000000057 *** 18.333
1000000000039 *** 42.639
1000000000061 *** 50.75
1000000000063 *** 42.383


For 1000000000039, the value seen in the first case is 81.544, and in the second case it is 42.639. This proves our hypothesis. For some of them, the half rule is not seen.