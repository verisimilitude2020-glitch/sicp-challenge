The good-enough? test used in computing square roots will not be very effective for finding the square roots of very small numbers. 
Also, in real computers, arithmetic operations are almost always performed with limited precision. 
This makes our test inadequate for very large numbers. 
Explain these statements, with examples showing how the test fails for small and large numbers. 
An alternative strategy for implementing good-enough? is to watch how guess changes from one iteration to the next and to stop when the change is a very small fraction of the guess. Design a square-root procedure that uses this kind of end test. 
Does this work better for small and large numbers?

(define (sqrt-iter guess x)
 ( if(good-enough guess x) guess (sqrt-iter (improve guess x) x)))

 (define (improve guess x)
 (average guess (/ x guess)))

 (define (average x y)
 (/ (+ x y) 2)

 (define (good-enough guess x)
 (< (abs (- (square guess) x)) 0.001))

 (define  (sqrt x)
 	(sqrt-iter 1.0 x))


==> For very small numbers, the tolerance value of 0.001 will always be met. Very small numbers have very small
square roots. Therefore, the looping of sqrt-iter will not be accurate. 

Examples: 

Small number: (sqrt 0.00009)
--> 0.03220324381282134. Squaring 0.03220324381282134 gives 0.0010370489120680158

If number is very, very large, it is difficult to represent the difference between the guess and actual
number to be less than 0.001 from the original number. Therefore, it continues to compute and gets into infinite loop

Large number: (sqrt 4343242343244444434343)