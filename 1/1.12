The following pattern of numbers is called Pascal's triangle.
    1
   1 1
  1 2 1
 1 3 3 1
1 4 6 4 1

The numbers at the edge of the triangle are all 1, and each number inside the triangle is the sum of the two numbers above it.35 Write a procedure that computes elements of Pascal's triangle by means of a recursive process.

==>

I. Find value present at a given (row, col) location in Pascal Triangle.

Flipping this triangle to re-align the integers in a row-column format.

   0   1  2  3  4
   __ __ __ __ __ 
 |
0| 1  
 |
1| 1   1
 |
2| 1   2  1
 |
3| 1   3  3  1
 |
4| 1   4  6  4   1

So, glancing through this row, we find

* if row and col both are equal, then the cell value is 1
* if col == 0, then the cell value is also 1
* For arriving at the third condition, lets do some calculation

a. Value of 2 in (2, 1) in the 2nd row
 --> Val(2, 1) = Val(1, 0) + Val (1, 1)
               = 1 + 1
               = 2

b. Value of 3 in (3, 1) in the 3rd row
--> Val(3, 1) = Val(2, 0) + Val(2, 1)
              = 1 + 2
              = 3

c. Value of 3 in (3, 2) in the 3rd row
--> Val(3, 2) = Val(2, 1) + Val(2, 2)
              = 2 + 1
              = 3

Generalizing this,

Val(row, col) = Val((row-l)(col-1)) + Val((row - l) col)

It leads us to this easy to understand Scheme function. This gives us the value present at given (row, col)
combination in a Pascal triangle. I assume that rows and cols start from 0.

(define (pascal row col) 
   (cond ((or (= col 0) 
              (= col row)) 1) 
         (else (+ (pascal (- row 1) (- col 1)) 
                  (pascal (- row 1) col ))))) 

    



