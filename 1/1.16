Design a procedure that evolves an iterative exponentiation process that uses successive squaring and uses a logarithmic number of steps, as does fast-expt. (Hint: Using the observation that (b^n/2)2 = (b^2)n/2, keep, along with the exponent n and the base b, an additional state variable a, and define the state transformation in such a way that the product a bn is unchanged from state to state. At the beginning of the process a is taken to be 1, and the answer is given by the value of a at the end of the process. 
In general, the technique of defining an invariant quantity that remains unchanged from state to state is a powerful way to think about the design of iterative algorithms.)

==>

When n is even, the equation (ab)^n becomes


a*b^n = a * (b^n/2)^2
       = a * (b^2)^n/2
       = a1 * b1^n1

Where, a1 = a
       b1 = b^2
       n1 = n/2


When n is odd, the equation (ab)^n  becomes

a*b^n = a * b * b^n-1
      = (a*b) * b^n-1
      = a1 * b1^n1

Where, a1 = a * b
       b1 = b
       n1 = n - 1

This can be translated to the below solution.

(define (fast-expt-iter a b n)
  (cond ((= n 0)
         a)
        ((even? n)
         (fast-expt-iter a (* b b) (/ n 2)))
        (else
         (fast-expt-iter (* a b) b (- n 1)))))

(define (even? n)
    (= (remainder n 2) 0))

Inspired from https://codology.net/post/sicp-solution-exercise-1-16/#:~:text=Exercise%201.16%3A%20Design%20a%20procedure,%2C%20as%20does%20fast%2Dexpt%20.

