There is a clever algorithm for computing the Fibonacci numbers in a logarithmic number of steps. Recall the transformation of the state variables a and b in the fib-iter process of section 1.2.2: a  a + b and b  a. Call this transformation T, and observe that applying T over and over again n times, starting with 1 and 0, produces the pair Fib(n + 1) and Fib(n). In other words, the Fibonacci numbers are produced by applying Tn, the nth power of the transformation T, starting with the pair (1,0). Now consider T to be the special case of p = 0 and q = 1 in a family of transformations Tpq, where Tpq transforms the pair (a,b) according to a  bq + aq + ap and b  bp + aq. Show that if we apply such a transformation Tpq twice, the effect is the same as using a single transformation Tp'q' of the same form, and compute p' and q' in terms of p and q. This gives us an explicit way to square these transformations, and thus we can compute Tn using successive squaring, as in the fast-expt procedure. Put this all together to complete the following procedure, which runs in a logarithmic number of steps

(define (fib n)
  (fib-iter 1 0 0 1 n))
(define (fib-iter a b p q count)
  (cond ((= count 0) b)
        ((even? count)
         (fib-iter a
                   b
                   <??>      ; compute p'
                   <??>      ; compute q'
                   (/ count 2)))
        (else (fib-iter (+ (* b q) (* a q) (* a p))
                        (+ (* b p) (* a q))
                        p
                        q
                        (- count 1)))))

==> 

Bit complicated one to understand. Let's go step-by step on this.

1. Let T denote the following transformation
    T => 
        a = a + b
        b = a

2. If we apply T n-times. Which means if we do the above step n times, we get similar result to that of 
Fib(n) + Fib(n - 1)

3. Now consider another transformation Tpq. The above T in step 2 is a special case of Tpq when p = 0 and q = 1. Tpq is defined as 

Tpq ==> 
      a = bq + aq + ap
      b = bp + aq

4. Let's introduce a second version of this transformation in 3 called as Tp`q`.  
 
 Tp`q` ==> 
      a = bq` + aq` + ap`
      b = bp` + aq`

5. We need to prove that when Tpq is applied twice, it is algebraically equal to Tp`q`.

So,
        Tpq(a, b) = ((bq + aq + ap), (bp + aq))
        Applying Tpq on itself, we get
        Tpq(Tpq(a, b)) = Tpq((bq + aq + ap), (bp + aq))
                       = (((bp + aq)q + (bq + aq + ap)q + (bq + aq + ap)p), ((bp + aq)p + (bq + aq + ap)q))
                       = ((bpq + aq2  + bq2 + aq2 + apq + bpq + apq + ap2), (bp2 + apq + bq2 + aq2 + apq))
                       = ((b(q2 + 2pq) + a(q2 + 2pq) + a(p2 + q2)), (b(p2 + q2) + a(q2 + 2pq)))

        
        if we assume q2 + 2pq = q` and p` = p2 + q2, the result is similar to 

        Tp`q`(a, b) = ((bq` + aq` + ap`), (bp` + aq`)). Plugging these values in the below procedure


(define (fib n) (fib-iter 1 0 0 1 n))
    (define (fib-iter a b p q count)
    (cond ((= count 0) b)
            ((even? count)
            (fib-iter a
                    b
                    (+ (square p) (square q))
                    (+ (* 2 p q) (square q))
                    (/ count 2)))
            (else (fib-iter (+ (* b q) (* a q) (* a p))
                            (+ (* b p) (* a q))
                            p
                            q
                            (- count 1)))))


Solution inspired from 

    https://tekkie.wordpress.com/2010/11/22/sicp-exercise-1-19-optimizing-fibonacci/
    http://jots-jottings.blogspot.com/2011/09/sicp-119-fibonacci-on-steroids.html 